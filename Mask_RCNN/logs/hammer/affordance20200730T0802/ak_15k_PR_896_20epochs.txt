
#############################
#  Learning Rate Scheduler
#############################

# Training - Stage 1 HEADS
# HEADS
print("\n************* trainining HEADS *************")
model.train(dataset_train, dataset_val,
        learning_rate=config.LEARNING_RATE,
        epochs=10, # 100
        augmentation=augmentation,
        layers='heads')

# Training - Stage 2
# Finetune layers from ResNet stage 4 and up
print("\n************* trainining ResNET 4+ *************")
model.train(dataset_train, dataset_val,
      learning_rate=config.LEARNING_RATE/10,
      epochs=15,  # 100
      augmentation=augmentation,
      layers='4+')

# Training - Stage 3
# Fine tune all layers
print("\n************* trainining ALL *************")
model.train(dataset_train, dataset_val,
        learning_rate=config.LEARNING_RATE/100,
        epochs=20, # 240
        augmentation=augmentation,
        layers='all')

# ###########################################################
# # Dataset
# ###########################################################

class AffordanceConfig(Config):
    """Configuration for training on the toy  dataset.
    # Derives from the base Config class and overrides some values.
    # """
    # Give the configuration a recognizable name
    NAME = "Affordance"

    # Number of classes (including background)
    NUM_CLASSES = 1 + 205  # Background + objects

    ##################################
    ###  GPU
    ##################################

    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
    bs = GPU_COUNT * IMAGES_PER_GPU

    os.environ["CUDA_VISIBLE_DEVICES"] = ""

    config_ = tf.ConfigProto()
    #gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.90)
    #config_ = tf.ConfigProto(gpu_options=gpu_options)
    config_.gpu_options.allow_growth = True
    sess = tf.Session(config=config_)

    ##################################
    ###  Backbone
    ##################################

    ### BACKBONE = "resnet50"

    ##################################
    ###
    ##################################

    LEARNING_RATE = 1e-03
    WEIGHT_DECAY = 0.0001
    ### TRAIN_BN = None

    ##################################
    ###  NUM OF IMAGES
    ##################################

    # Number of training steps per epoch
    STEPS_PER_EPOCH = (1584*10) // bs
    VALIDATION_STEPS = (721*10) // bs

    ##################################
    ###  FROM DATASET STATS
    ##################################
    ''' --- run datasetstats for all params below --- '''

    MAX_GT_INSTANCES = 2   # really only have 1 obj/image or max 3 labels/object
    DETECTION_MAX_INSTANCES = 2

    # DETECTION_MIN_CONFIDENCE = 0.9

    ### MEAN_PIXEL = np.array([113.45, 112.19, 130.92])  ### SYN RGB DR + PR
    ### MEAN_PIXEL = np.array([126.78, 131.24, 150.50])  ### DR
    MEAN_PIXEL = np.array([100.17, 93.19, 111.39]) ### PR

    IMAGE_RESIZE_MODE = "square"
    IMAGE_MIN_DIM = 896
    IMAGE_MAX_DIM = 896
    RPN_ANCHOR_SCALES = (32, 64, 128, 256, 512)     ### 1024

    USE_MINI_MASK = True
    MINI_MASK_SHAPE = (56, 56)

    TRAIN_ROIS_PER_IMAGE = 100 # TODO: DS bowl 512
    RPN_TRAIN_ANCHORS_PER_IMAGE = 128

    # MASK_SHAPE = [56, 56]  # TODO: AFFORANCENET TRIED 14, 28, 56, 112, 224
